1) List all the books that are written by Author Loni and has price

less then 600.

=>

select * from books where author_name="loni" and price<600;



2) List the Issue details for the books that are not returned yet.

=>

select *from issue where return_date is NULL;




3) Update all the blank return_date with 31-Dec-06 excluding 7005

and 7006.

=>

update issue 
set return_date="2006-12-31" 
where return_date is null and lib_issue_id not in(7005,7006);





4) List all the Issue details that have books issued for more then 30

days.

=>

select* from issue where datediff(return_date,issue_date)>30;




5) List all the books that have price in range of 500 to 750 and has

category as Database.

=>

select * from books where cost between 500 and 750 and category='database';




6) List all the books that belong to any one of the following
categories Science, Database, Fiction, Management.


=>

 select * from books where category in("science","database","fiction","management");





7) List all the members in the descending order of Penalty due on

them.

=>

select * from members order by penalty_amount desc;





8) Modify the price of book with id 103 to Rs 300 and category to

RDBMS.

=>

 update books set cost=300,category="RDBMS" where book_no=103;





9) List all the books in ascending order of category and descending

order of price.


=>

select * from books order by category,cost desc;




10) List all the books that contain word SQL in the name of the book.

=>

select * from books where book_name like  "%sql%";




11) List the Lib_Issue_Id, Issue_Date, Return_Date and No of days

Book was issued.

=>

 select lib_issue_id,issue_date,return_date ,datediff(return_date,issue_date) as "number of days books issued" from issue;




12) Find the details of the member of the Library in the order of their
joining the library.

=>

select * from members order by acc_open_date;




13) Display the count of total no of books issued to Member 1.

=>

 select count(member_id) as "no of times books issued by member 1" from issue group by member_id having member_id=1;



14) Display the total penalty due for all the members.

=>

 select sum( penalty_amount) as "total penalty" from members;


15) Display the total no of members

=>

select count(*) as "total members" from members;



16) Display the total no of books issued

=>

select count(book_no) as "total books issued" from issue;



17) Display the average membership fees paid by all the members

=>

select avg(fees_paid) as "average fees paid" from members ;



18) List the various categories and count of books in each category.

=>

select category , count(*) as "number of books in this category" from books group by category;





19) List the book_No and the number of times the book is issued in the
descending order of count.

=>
select book_no ,count(book_no) as number_of_times_book_issued from issue group by book_no order by number_of_times_book_issued desc;





20) Find the maximum, minimum, total and average penalty amount in
the member table.

=>

select 
min(penalty_amount) as min_penalty ,
max(penalty_amount) as max_penalty ,
avg(penalty_amount) as avg_penalty ,
sum(penalty_amount) as total_penalty 
from members;






21) Display the member id and the no of books for each member that
has issued more then 2 books.

=>

select member_id ,count(member_id) as count from issue group by member_id having count>2 ;



22) Display the member id, book no and no of times the same book is
issued by the member in the descending order of count.

=>

select member_id ,book_no ,count(book_no) as "number_of_times_book_issued" from issue group by member_id,book_no order by number_of_times_book_issued desc;


23) Display the month and no of books issued each month in the
descending order of count.

=>

select month(issue_date) as issue_month ,count(month(issue_date)) as books_issued from issue group by issue_month order by books_issued desc;


24) List the book_no of all the books that are not issued to any
member so far.

=>

 select book_no from books where book_no not in(select book_no from issue) ;


25) List all the member id that exist in member table and has also at
least one book issued by them.

=>

select member_id from members where member_id in(select member_id from issue);

                            --and--

select distinct members.member_id from members inner join issue on members.member_id=issue.member_id;




 
26) List the member ID with highest and lowest no of books issued.

=>
       (select member_id,count(*) number_of_books_issued from issue group by member_id order by count(member_id)desc limit 1)
     union
     (select member_id,count(*) as no_of_books_issued from issue group by member_id order by count(member_id) limit 1);





27) List all the Issue_details for books issued in December and July
without using any arithmetic, Logical or comparison operator.

=>

 select * from issue where month(issue_date) in (12,7);





28) List the Book_No, Book_Name and Issue_date for all the books
that are issued in month of December and belong to category Database.

=>

select b.book_no,b.book_name,i.issue_date from books b inner join issue i on b.book_no=i.book_no where month(i.issue_date)=12 and b.category='database';


29) List the Member Id, Member Name and max books allowed in the
descending order of the max books allowed.

=>

select member_id,member_name,max_books_allowed from members order by max_books_allowed desc;


30) List the Book No, Book Name, Issue_date and Return_Date for all
the books issued by Richa Sharma.

=>

select b.book_no,b.book_name,i.issue_date,i.return_date from books b inner join issue i on b.book_no=i.book_no inner join members m on i.member_id=m.member_id where m.member_name="richa sharma";



31) List the details of all the members that have issued books in
Database category.

=>

select distinct m.* from members m inner join issue i on m.member_id=i.member_id inner join books b on b.book_no=i.book_no where b.category='database';



32) List all the books that have highest price in their own category.

=>


select * from books b where b.cost = (select max(cost) from books where category=b.category );

33) List all the Issue_Details where Issue_date is not within the
Acc_open_date and Return_date for that member.

=>

select i.* from issue i inner join members m on i.member_id=m.member_id where issue_date not between m.acc_open_date and i.return_date;


34) List all the members that have not issued a single book so far.

=>

select * from members where member_id not in (select distinct member_id from issue);


                         --or--


select m.* from members m left outer join issue i on m.member_id=i.member_id where i.issue_date is null;


35) List all the members that have issued the same book as issued by
Garima.

=>

select distinct  m.*from members m inner join issue i on m.member_id=i.member_id where m.member_name!="garima sen"and  i.book_no in(select i.book_no from issue i inner join members m on i.member_id=m.member_id where m.member_name='Garima sen');


36) List the Book_Name, Price of all the books that are not returned
for more then 30 days.

=>

select book_name ,cost from issue i inner join books b on i.book_no=b.book_no where  DATEDIFF(return_date,issue_date)>30;



37) List all the authors and book_name that has more then 1 book
written by them.

=>

select author_name ,book_name from books where author_name in (select author_name from books group by author_name having count(*)>1);



38) List the Member ID, Member Name of the people that have issued
the highest and the lowest no of books.

=>

(select m.member_id,m.member_name from members m inner join issue i on m.member_id=i.member_id group by m.member_id,m.member_name order by count(*) desc limit 1) union  ( select m.member_id,m.member_name from members m inner join issue i on m.member_id=i.member_id group by m.member_id,m.member_name order by  count(*) limit 1);

39) List the details of highest 3 priced books.

=>

select *from books order by (cost ) desc limit 3;




40) List the total cost of all the books that are currently issued but not
returned.

=>

select sum(b.cost) from books b inner join issue i on b.book_no=i.book_no where i.return_date is null;




41) List the details of the book that has been issued maximum no of
times.

=>

 select * from books where book_no=(select book_no from issue group by book_no order by count(*) desc limit 1);



42) List how many books are issued to lifetime members.

=>

 select count(*) as books_issued_by_lifetime_member from members m  inner join issue i on m.member_id=i.member_id  where m.membership_type='lifetime';


43) List all member types and how many members are there in each
type.

=>

 select membership_type , count(*) as number_of_members from members group by membership_type ;


44) List first 5 members who had joined library.

=>

 select * from members order by acc_open_date limit 5;


45) List the members with their member type, who have issued books
during the period 1st December to 31st December.

=>

select m.* from members m inner join issue i on m.member_id=i.member_id  where issue_date between '2006-12-1' and '2006-12-31';




46) List all the members who have not returned books yet.

=>

 select m.* from members m inner join issue i on m.member_id=i.member_id where i.return_date is null;





47) List all the members who joined library on the same date Garima
joined.

=>

select * from members where member_name!='garima sen' and acc_open_date=(select acc_open_date  from members where member_name='garima sen');



48) List all the members who has issued books from author “Loni” in
the month of December

=>

select m.* from members m inner join issue i on m.member_id=i.member_id inner join books b on b.book_no=i.book_no where b.author_name='loni' and month(i.issue_date)=12;




49) List names of the authors whose books are least issued by
lifetime members.

=>

select b.author_name,count(*) from books b inner join issue i on b.book_no=i.book_no inner join members m on m.member_id=i.member_id where m.membership_type='lifetime' group by b.author_name order by count(*) ;




50) List the names of members who has issued the books whose cost
is more than 300 rupees and whose author is “Scott Urman”

=>

select m.* from members m inner join issue i on m.member_id=i.member_id inner join books b on b.book_no=i.book_no where b.cost>300 and b.author_name="scott urman";




51) List all lifetime members who joined library during 1st January
2006 to 31st December 2006 but issued only one book.

=>

 select m.* from members m where membership_type='lifetime' and acc_open_date between '2006-1-1' and '2006-12-31' and m.member_id in(select member_id from issue group by member_id having count(*)=1 );

52) Modify the Penalty_Amount for Garima Sen to Rs 100.

=>
update members
    -> set penalty_amount=100 where member_name="garima sen";